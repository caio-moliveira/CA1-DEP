load("D:/Caio Machado/CCT College - IT/7th Semester - 2023/Data Explanation and Preparation/CA1/london-crime.csv")
setwd("D:/Caio Machado/CCT College - IT/7th Semester - 2023/Data Explanation and Preparation/CA1")
library(readr)
london_crime <- read_csv("london-crime.csv")
View(london_crime)
library(readr)
london_crime <- read_csv("london-crime.csv")
View(london_crime)
library(readr)
library(tidyverse)
library(ggplot2)
install.packages(c("tidyverse", "ggplot2"))
library(readr)
library(tidyverse)
library(ggplot2)
mapdata <- map_data("world") ##ggplot2
mapdata <- map_data("london") ##ggplot2
london_crime <- read_csv("london-crime.csv")
mapdata <- map_data("london") ##ggplot2
mapdata <- map_data("world") ##ggplot2
mapdata <- map_data("world") ##ggplot2
mapdata <- map_data("world") ##ggplot2
mapdata
london_crime <- read_csv("london-crime.csv")
install.packages("ggplot2")   #only do this once
install.packages("tidyverse") #only do this once
library(ggplot2)              #needs to be done each r session
library(tidyverse)            #needs to be done each r session
EUvax <- read.csv("C:/Users/prc/Desktop/EUvaccine.csv") #####this reads in the data file I made you will need to change the path to your computer
install.packages(c("tidyverse", "ggplot2","maps","mapdata"))
library(readr)
library(tidyverse)
library(ggplot2)
library(maps)
london_crime <- read.csv("london-crime.csv")
View(london_crime)
mapdata <- map_data("world") ##ggplot2
london_crime <- map_data("world") ##ggplot2
london_crime <- mapdata("world") ##ggplot2
london_crime <- map_data("london") ##ggplot2
library(mapdata)
install.packages(c("tidyverse", "ggplot2","maps","mapdata"))
library(readr)
library(tidyverse)
library(ggplot2)
library(maps)
library(mapdata)
london_crime <- map_data("london") ##ggplot2
london_map <- map_data("london") ##ggplot2
london_crime <- read.csv("london-crime.csv")
View(london_crime)
london_map <- map_data("london") ##ggplot2
london_map <- map_data("world") ##ggplot2
london_map <- left_join(mapdata, london_crime, by="region")
london_map <- left_join(london_map, london_crime, by="region")
View(london_map)
View(london_map)
london_map <- map_data("world", region = "uk:england:greater london")
london_map <- map_data("world", region = "uk:england:greater london")
london_map <- map_data("world", region = "uk:england")
available_regions <- map("world", plot = FALSE)$names
print(available_regions)
uk_map <- map_data("world", region = "uk")
View(uk_map)
england_map <- subset(uk_map, region %in% c("London"))
View(england_map)
england_map <- subset(uk_map, region %in% c("England"))
View(england_map)
england_map <- subset(uk_map, region %in% c("England"))
View(uk_map)
View(uk_map)
View(england_map)
london_crime <- read.csv("london-crime.csv")
View(london_crime)
# Get map data for the United Kingdom
uk_map <- map_data("world", region = "uk")
# Filter map data for England
england_map <- subset(uk_map, region %in% c("England"))
# Plot the map
ggplot() +
geom_polygon(data = england_map, aes(x = long, y = lat, group = group), fill = "white", color = "black") +
theme_minimal()
ggplot() +
geom_polygon(data = uk_map, aes(x = long, y = lat, group = group), fill = "white", color = "black") +
theme_minimal()
london_crimes <- read.csv("london-crime.csv")
View(london_crimes)
install.packages(c("tidyverse", "ggplot2"))
library(readr)
library(tidyverse)
library(ggplot2)
ireland_crime <- read.csv("crime_ireland.csv")
View(ireland_crime)
missing_values <- any(is.na(ireland_crime))
missing_values
missing_count <- colSums(is.na(ireland_crime))
missing_count
ireland_crime <- ireland_crime[!(ireland_crime$VALUE == 0), ]
ireland_crime2 <- ireland_crime[!(ireland_crime$VALUE == 0), ]
View(ireland_crime2)
View(ireland_crime2)
ireland_crime2 <- ireland_crime[!(ireland_crime$VALUE == 0), ]
rownames(ireland_crime2) <- NULL
View(ireland_crime2)
ireland_crime <- read.csv("crime_ireland.csv")
missing_count <- colSums(is.na(ireland_crime))
ireland_crime2 <- ireland_crime[!(ireland_crime$VALUE == 0), ]
rownames(ireland_crime2) <- NULL
View(ireland_crime)
library(ggplot2)
library(gridExtra)
# Create subset of "cars"
cars <- read.csv(file = "cars.txt", stringsAsFactors = FALSE)
# MinMax Standardization
mydata<-cars
View(mydata)
ggplot(mydata, aes(x = mpg, y = weightlbs)) + geom_point()
normalizeMM <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
mpg_norm<-normalizeMM(mydata$mpg)
weightlbs_norm<-normalizeMM(mydata$weightlbs)
ggplot(mydata, aes(x = mpg_norm, y = weightlbs_norm)) + geom_point()
View(normalizeMM)
View(mydata)
View(mydata)
# Original Data Plot
p1 <- ggplot(mydata, aes(x = mpg, y = weightlbs)) + geom_point() + labs(title = "Original Data")
# Normalized Data Plot
p2 <- ggplot(mydata, aes(x = mpg_norm, y = weightlbs_norm)) + geom_point() + labs(title = "Minmax Normalized Data")
# Arrange both plots side by side
grid.arrange(p1, p2, ncol = 2)
View(normalizeMM)
View(normalizeMM)
View(normalizeMM)
View(normalizeMM)
View(cars)
View(ireland_crime2)
View(ireland_crime2)
# Original Data Plot
p1 <- ggplot(ireland_crime2, aes(x = County, y = VALUE)) + geom_point() + labs(title = "Original Data")
# Normalized Data Plot
p2 <- ggplot(ireland_crime2, aes(x = Type.of.Offence, y = VALUE)) + geom_point() + labs(title = "Minmax Normalized Data")
# Arrange both plots side by side
grid.arrange(p1, p2, ncol = 2)
mydata<-cars
ggplot(mydata, aes(x = mpg, y = weightlbs)) + geom_point()
cars <- read.csv(file = "cars.txt", stringsAsFactors = FALSE)
mydata<-cars
ggplot(mydata, aes(x = mpg, y = weightlbs)) + geom_point()
mpg_zscaled<-scale(mydata$mpg)
weightlbs_zscaled<-scale(mydata$weightlbs)
ggplot(mydata, aes(x = mpg_zscaled, y = weightlbs_zscaled)) + geom_point()
p3 = ggplot(mydata, aes(x = mpg_zscaled, y = weightlbs_zscaled)) + geom_point() + labs(title = "Scaled Data")
# Arrange both plots side by side
grid.arrange(p1, p2, p3, ncol = 3)
install.packages("robustbase")
# Install and load the required packages
install.packages("gridExtra")
library(ggplot2)
library(robustbase)
library(gridExtra)
install.packages("gridExtra")
mpg_robust <- (mydata$mpg - median(mydata$mpg)) / mad(mydata$mpg)
weightlbs_robust <- (mydata$weightlbs - median(mydata$weightlbs)) / mad(mydata$weightlbs)
# Normalize the data using the Robust Scaler
mpg_robust <- (mydata$mpg - median(mydata$mpg)) / mad(mydata$mpg)
weightlbs_robust <- (mydata$weightlbs - median(mydata$weightlbs)) / mad(mydata$weightlbs)
# Decimal Scaling
# Function to perform decimal scaling
decimal_scale <- function(x) {
max_value <- max(abs(x))
scale_factor <- 10^ceiling(log10(max_value))
scaled_values <- x / scale_factor
return(scaled_values)
}
# Apply decimal scaling to the 'Value' column
mpg_dscale <- decimal_scale(mydata$mpg)
weightlbs_dscale <- decimal_scale(mydata$weightlbs)
# Function to perform natural log scaling
log_scale <- function(x) {
return(log(x))
}
mpg_logscale <- log_scale(mydata$mpg)
weightlbs_logscale <- log_scale(mydata$weightlbs)
# Function to perform square root scaling
sqrt_scale <- function(x) {
return(sqrt(x))
}
mpg_sqrtscale <- sqrt_scale(mydata$mpg)
weightlbs_sqrtscale <- sqrt_scale(mydata$weightlbs)
# Function to perform inverse square root scaling
inv_sqrt_scale <- function(x) {
return(1 / sqrt(x))
}
# Apply scaling functions to the 'Value' column
mpg_invsqrtscale <- inv_sqrt_scale(mydata$mpg)
weightlbs_invsqrtscale <- inv_sqrt_scale(mydata$weightlbs)
# Original Data Plot
p1 <- ggplot(mydata, aes(x = mpg, y = weightlbs)) + geom_point() +  labs(title = "Original Data")
# Normalized Data Plot
p2 <- ggplot(mydata, aes(x = mpg_norm, y = weightlbs_norm)) + geom_point(color = "blue") + labs(title = "Min Max Normalized Data")
# Normalized Data Plot
p3 <- ggplot(mydata, aes(x = mpg_zscaled, y = weightlbs_zscaled)) + geom_point(color = "red") + labs(title = "Normalized Data")
# Robust Scaled Data Plot
p4 <- ggplot(mydata, aes(x = mpg_robust, y = weightlbs_robust)) + geom_point(color = "yellow") + labs(title = "Robust Scaled Data")
# Decimal Scaled Data Plot
p5 <- ggplot(mydata, aes(x = mpg_dscale, y = weightlbs_dscale)) + geom_point(color = "orange") + labs(title = "Decimal Scaled Data")
# log Scaled Data Plot
p6 <- ggplot(mydata, aes(x = mpg_logscale, y = weightlbs_logscale)) + geom_point(color = "pink") + labs(title = "Natural Log Scaled Data")
# sqrt Scaled Data Plot
p7 <- ggplot(mydata, aes(x = mpg_sqrtscale, y = weightlbs_sqrtscale)) + geom_point(color = "green") + labs(title = "sqrt Scaled Data")
# Inv-sqrt Scaled Data Plot
p8 <- ggplot(mydata, aes(x = mpg_invsqrtscale, y = weightlbs_invsqrtscale)) + geom_point(color = "light blue") + labs(title = "Inverse sqrt Scaled Data")
# Arrange both plots side by side
grid.arrange(p1, p2, p3, p4, p5, p6, p7, p8, ncol = 2, nrow = 4)
ireland_crime <- read.csv("crime_ireland.csv")
missing_count <- colSums(is.na(ireland_crime))
ireland_crime2 <- ireland_crime[!(ireland_crime$VALUE == 0), ]
rownames(ireland_crime2) <- NULL
View(ireland_crime2)
ireland_crime2 <- ireland_crime2 %>%
rename(VALUE = value)
View(ireland_crime2)
install.packages(c("tidyverse", "ggplot2"))
library(readr)
library(tidyverse)
library(ggplot2)
ireland_crime <- read.csv("crime_ireland.csv")
missing_count <- colSums(is.na(ireland_crime))
ireland_crime2 <- ireland_crime[!(ireland_crime$VALUE == 0), ]
rownames(ireland_crime2) <- NULL
ireland_crime2 <- ireland_crime[!(ireland_crime$Value == 0), ]
rownames(ireland_crime2) <- NULL
county_grouped <- ireland_crime2 %>%
group_by(County) %>%
summarise(Sum_Value = sum(value))
library(dplyr)
install.packages(c("tidyverse", "ggplot2","dplyr"))
library(dplyr)
county_grouped <- ireland_crime2 %>%
group_by(County) %>%
summarise(Sum_Value = sum(value))
View(ireland_crime2)
county_grouped <- ireland_crime2 %>%
group_by(County) %>%
summarise(Sum_Value = sum(value))
county_grouped <- ireland_crime2 %>%
group_by(Year) %>%
summarise(Sum_Value = sum(value))
county_grouped <- ireland_crime2 %>%
group_by(Year) %>%
county_grouped <- ireland_crime2 %>%
group_by(Year)
group <- group_by(ireland_crime2, )
count_grouped
View(group)
grouped_data_county <- ireland_crime2 %>%
group_by(County) %>%
summarise(Total_Crimes = sum(value))
rlang::last_trace()
install.packages(c("tidyverse", "ggplot2","dplyr"))
library(readr)
library(tidyverse)
library(ggplot2)
library(dplyr)
ireland_crime <- read.csv("crime_ireland.csv")
missing_count <- colSums(is.na(ireland_crime))
ireland_crime2 <- ireland_crime[!(ireland_crime$Value == 0), ]
rownames(ireland_crime2) <- NULL
grouped_data_county <- ireland_crime2 %>%
group_by(County) %>%
summarise(Total_Crimes = sum(value))
install.packages(c("tidyverse", "ggplot2", "dplyr"))
View(ireland_crime2)
View(ireland_crime2)
install.packages(c("tidyverse", "ggplot2","dplyr","readr"))
library(readr)
library(tidyverse)
library(ggplot2)
library(dplyr)
grouped_data_county <- ireland_crime2 %>%
group_by(County) %>%
summarise(Total_Crimes = sum(value))
library(dplyr)
grouped_data_county <- ireland_crime2 %>%
group_by(County) %>%
summarise(Total_Crimes = sum(value))
colnames(ireland_crime2)
grouped_data_county <- ireland_crime2 %>%
group_by(County) %>%
summarise(Total_Crimes = sum(Value))
grouped_data_county <- ireland_crime2 %>%
group_by(County) %>%
summarise(Total_Crimes = sum(Value))
View(grouped_data_county)
grouped_data_year <- ireland_crime2 %>%
group_by(Year) %>%
summarise(Total_Crimes = sum(Value))
View(grouped_data_year)
grouped_data_county <- ireland_crime2 %>%
group_by(County) %>%
summarise(Total_Crimes = sum(Value))%>%
arrange(desc(Total_Crimes))
grouped_data_year <- ireland_crime2 %>%
group_by(Year) %>%
summarise(Total_Crimes = sum(Value))%>%
arrange(desc(Total_Crimes))
View(grouped_data_county)
View(grouped_data_year)
